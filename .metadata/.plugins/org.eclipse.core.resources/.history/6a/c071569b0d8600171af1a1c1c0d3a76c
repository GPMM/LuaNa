Class = require "OO/Class"

local NCLElem = Class:createClass({
  name = nil, 
  childs = nil,
  childsNames = nil,
  childsClasses = nil,
  childsObjects = nil,
  attributes = nil, 
  ncl = nil
})

function NCLElem:setName(name)
    self.name = name
end

function NCLElem:getName()
    return self.name
end

function NCLElem:addChild(child)
    table.insert(self.childs, child)
end

function NCLElem:getChild(i)
    return self.childs[i]
end

function NCLElem:setChilds(...)
    self.childs = {}
    if(#arg>0)then
      for i, v in ipairs(arg) do
          self.childs[i] =  v
      end
    end
end

function NCLElem:getChilds()
    return self.childs
end

function NCLElem:getChildsNames()
    return self.childsNames
end

function NCLElem:getChildsClasses()
    return self.childsClasses
end

function NCLElem:getChildsObjects()
    return self.childsObjects
end

function NCLElem:addAttribute(attribute, value)
    if(attribute ~= "" and value ~= "")then
       self.attributes[attribute] = value
    end
end

function NCLElem:getAttribute(attribute)
    return self.attributes[attribute]
end

function NCLElem:setAttributes(attributes)
    self.attributes = {}
    local attributes = attributes or {}
    for i, v in pairs(attributes) do
       self:addAttribute(i, v)
    end
end

function NCLElem:getAttributes()
    return self.attributes
end

function NCLElem:generateElem()
   local e, s, t, u, w= nil
   
   print("super:"..self:getName())
   
   u, s = string.find(self:getNcl(), "<"..self:getName().." ")
   e = string.find(self:getNcl(), ">")
   
   if(s ~= nil and e ~= nil)then
     local attributes = string.sub(self:getNcl(),s+1,e-1)   
     for w in string.gmatch(attributes, "%S+") do
       s = string.find(w, "=")
       local attribute = string.sub(w, 1, s-1) 
       local value = string.sub(w, s+1, string.len(w))  
       self:addAttribute(attribute, value)
     end
   end
   
   local childsNames = self:getChildsNames()
   if(childsNames ~= nil)then
     for i, w in ipairs(self:getChildsNames()) do     
         s = string.find(self:getNcl(),">\n")
         e = string.find(self:getNcl(),"</"..self:getName())  
         
         local childsNCL = nil
         if(s ~= nil and e ~= nil)then
            childsNCL = string.sub(self:getNcl(), s+1, e-1)         
         end  
         
         if(childsNCL ~= nil)then
            s = string.find(childsNCL, "<"..w)
            u, e = string.find(childsNCL,"</"..w..">")  
            u, t = string.find(childsNCL,"/>\n")  
            while(s ~= nil)do         
              local childNCL = nil
              local has = false 
              
              if(s ~= nil)then
                 if(e ~= nil)then
                    childNCL = string.sub(childsNCL, s, e)
                    has = true
                 else
                    childNCL = string.sub(childsNCL, s, t)
                    has = true
                 end
              end
              
              if(has == true)then                                  
                local childClass = self:getChildsClasses()[w]
                if(childClass ~= nil)then
                  local childObject = childClass:create()
                  childObject:setNcl(childNCL)
                  print(self:getName()..">>"..w)
                  print("\n")
                  --print(childObject:getName())
                  childObject:generateElem()                                    
                  --print("ChildNCL:"..childNCL)
                  print(childNCL)
                  --print("ChildsNCL:"..childsNCL)
                  
                  s = string.find(childsNCL, "<"..w)
                  u, e = string.find(childsNCL,"</"..w..">")  
                  u, t = string.find(childsNCL,"/>\n")
                  
                  local aux = nil
                  if(s ~= nil)then
                    if(e ~= nil)then
                       aux = string.sub(childsNCL, 1, s-1)..string.sub(childsNCL, e+1, string.len(childsNCL))
                       childsNCL = aux
                    else
                       aux = string.sub(childsNCL, 1, s-1)..string.sub(childsNCL, t+1, string.len(childsNCL))
                       childsNCL = aux
                    end                    
                  end  
                  --print("ChildsNCL2:"..childsNCL)               
                end
              end
              
              if(childsNCL == nil)then
                break;
              end
              
              s = string.find(childsNCL, "<"..w)
              u, e = string.find(childsNCL,"</"..w..">")  
              u, t = string.find(childsNCL,"/>\n") 
           end
        end
     end
   end
end

function NCLElem:generateNcl(deep)
  local ncl = ""
  
  if(deep == 0 and Class:instanceOf(self, ncl))then
     ncl = self:getXmlHead().."\n"
  else
    for i=1,deep do
       ncl = ncl.." "
    end 
  end 
    
  ncl = ncl.."<"..self:getName()
  
  local attrs = self:getAttributes()
  if(attrs ~= nil)then
    for k, v in pairs(attrs) do
         if(v ~= nil)then
            ncl = ncl.." "..k.."=".."\""..v.."\""
         end
    end
  end 
 
  local childs = self:getChilds()
  local nchilds = #childs
  
  if(nchilds == 0)then
      return ncl.."/>\n"
  else
    ncl = ncl..">\n"  
    for i=1,nchilds do
        local child = self:getChild(i)
        ncl = ncl..child:generateNcl(deep+1) 
    end
       
    for i=1,deep do
        ncl = ncl.." "
    end 
  end 
  
  return ncl.."</"..self:getName()..">\n"
end

function NCLElem:setNcl(ncl)
   self.ncl = ncl
end

function NCLElem:getNcl()
   return self.ncl
end

function NCLElem:writeNcl()
  print(self:generateNcl(0))
end

return NCLElem